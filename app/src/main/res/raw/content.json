[
  {
    "id": 1,
    "name": "1. ЗАПИСЬ АРИФМЕТИЧЕСКИХ ВЫРАЖЕНИЙ",
    "accepted": false,
    "content": {
      "id": 1,
      "chapter_id": 1,
      "contentText": "<b>Цель</b> ‒ закрепление знаний по теоретическим основам алгоритмизации и программирования, приобретение навыков использования арифметических операций, функций и правил записи арифметических выражений согласно синтаксису языка Python. image_r Какой-то абзац. image_r Еще текст. {link} Последний абзац Цель ‒ закрепление знаний по теоретическим основам алгоритмизации и программирования, приобретение навыков использования арифметических операций, функций и правил записи арифметических выражений согласно синтаксису языка Python.\nЗнания, умения и владения, приобретаемые обучающимся в\nрезультате освоения темы, в рамках формируемых компетенций: ПК-1: ИД-1ПК-1, ИД-2ПК-1; ПК-2: ИД-1ПК-2, ИД-2ПК-2; см. Приложение 2: приобретение навыков разработки математических моделей\n(формируется часть указанных компетенций).\nТеоретическая часть\n1. Основные понятия алгоритмизации\nи программирования\n1.1. Этапы решения задач на ЭВМ\nЗадачи, решаемые с помощью ЭВМ, можно классифицировать\nпо различным критериям: по типу информации и информационным\nтехнологиям, по способу поиска решения (простые и переборные),\nпо характеру целей (задачи оптимизации, управления, обучения,\nинформационного поиска), по функциональному назначению, а\nтакже по уровню достижения цели и уровню их решения, в т. ч. по\nуровню автоматизации этапов их решения.\nЗадача становится разрешимой, если найдено правило, способ\nполучения результата. В информатике такое правило называют алгоритмом.\nРешение задачи на ЭВМ состоит из нескольких этапов,\nсреди которых основными являются следующие:\n1. Постановка задачи:\n- сбор информации о задаче;\n- формулировка условия задачи;\n- определение конечных целей решения задачи;\n- определение формы выдачи результатов;\n- описание данных (их типов, диапазонов величин, структуры\nи т.п.).\n6\n2. Формализация (анализ и исследование задачи, модели,\nпредставление ее в виде уравнений, соотношений, ограничений\nи т. п.):\n- анализ существующих аналогов задачи;\n- анализ технических и программных средств;\n- разработка математической модели;\n- разработка структур данных.\nПонятие моделирования\nПри решении задачи обычно исследуют не реальный объект, а\nего модель.\nМодель – искусственно созданный объект, обладающий всеми\nсущественными признаками реального объекта, явления или процесса.\nМоделирование – это метод познания, состоящий в создании\nи исследовании моделей.\nЦели моделирования:\n1) понять сущность изучаемого объекта;\n2) научиться управлять объектом и определять наилучшие\nспособы управления;\n3) прогнозировать прямые или косвенные последствия;\n4) решать прикладные задачи.\nМатематическая модель – это система математических соотношений (данных) – формул, уравнений, неравенств и т. д. ‒ и отношений между ними, описывающих поведение объекта с некоторой степенью точности и отражающих существенные свойства моделируемого процесса (объекта или явления).\nПорядок составления математической модели:\n- выделить реальный объект, на котором будет основываться\nматематическая модель, и из множества его свойств, закономерностей, внутренних связей, отдельных характеристик явления и параметров выделяем те, которые являются существенными для решаемой задачи, и отбросить несущественные;\n- определить, что считать исходными данными и результатами;\n- подобрать математический объект с тем же числом подобных\nпараметров, отражающий суть реального объекта; записать математические соотношения, связывающие результаты с исходными данными.\n3. Выбор метода решения.\n7\n4. Разработка алгоритма:\n- выбор метода проектирования алгоритма;\n- выбор формы записи алгоритма (блок-схемы, псевдокод и др.);\n- выбор тестов и метода тестирования;\n- проектирование алгоритма.\n5. Программирование:\n- выбор языка программирования;\n- уточнение способов организации данных;\n- запись алгоритма на выбранном языке программирования.\n6. Тестирование, отладка и исправление обнаруженных\nошибок:\n- синтаксическая отладка;\n- отладка семантики и логической структуры;\n- тестовые расчёты и анализ результатов тестирования;\n- совершенствование программы.\nОтладка программы\nОтладка программы – это процесс поиска и устранения ошибок в программе, производимый по результатам ее прогона на компьютере.\nВ современных программных системах отладка осуществляется с использованием специальных программных средств, называемых отладчиками. Эти средства позволяют исследовать внутреннее поведение программы.\nПрограмма-отладчик обычно обеспечивает следующие возможности:\n\uF02D пошаговое исполнение программы с остановкой после\nкаждой команды (оператора);\n\uF02D просмотр текущего значения любой переменной или\nнахождение значения любого выражения, в том числе с использованием стандартных функций; при необходимости можно установить новое значение переменной;\n\uF02D установку в программе \"контрольных точек\", т. е. точек,\nв которых программа временно прекращает свое выполнение, так\nчто можно оценить промежуточные результаты, и др.\nПри отладке программ важно помнить следующее:\n- в начале процесса отладки надо использовать простые тестовые данные;\n8\n- возникающие затруднения следует четко разделять и устранять строго поочередно;\n- не нужно считать причиной ошибок машину, так как современные машины и трансляторы обладают чрезвычайно высокой\nнадежностью.\nТест и тестирование программы\nТестирование – это испытание, проверка правильности работы программы в целом либо ее составных частей.\nПри отладке происходит локализация и устранение синтаксических ошибок и явных ошибок кодирования, в процессе же тестирования проверяется работоспособность программы, не содержащей явных ошибок. Тестирование устанавливает факт наличия ошибок, а отладка выясняет причину неправильной работы программы.\nКак бы ни была тщательно отлажена программа, решающим этапом, устанавливающим ее пригодность для работы, является контроль\nпрограммы по результатам ее выполнения на системе тестов.\nПрограмму условно можно считать правильной, если её запуск\nдля выбранной системы тестовых исходных данных во всех случаях\nдает правильные результаты. Но, как справедливо указывал известный теоретик программирования Э. Дейкстра, тестирование может\nпоказать лишь наличие ошибок, но не их отсутствие. Нередки случаи, когда новые входные данные вызывают \"отказ\" или получение\nневерных результатов работы программы, которая считалась полностью отлаженной.\nДля реализации метода тестов должны быть изготовлены или заранее известны эталонные результаты. Вычислять эталонные результаты нужно обязательно до, а не после получения машинных результатов. В противном случае имеется опасность невольной подгонки вычисляемых значений под желаемые, полученные ранее на машине.\n7. Анализ результатов решения задачи и уточнение математической модели с повторным выполнением этапов 2‒6 (при\nнеобходимости).\n8. Сопровождение программы: это работы, связанные с обслуживанием программ в процессе их эксплуатации:\n- доработка программы для решения конкретных задач;\n- составление документации к решённой задаче, к математической модели, к алгоритму, к программе, к набору тестов, к использованию программы.\n9\n1.2. Основы алгоритмизации\nАлгоритм – это метод (способ) решения задачи, записанный по\nопределённым правилам, в виде конечной последовательности однозначных предписаний, исполнение которых позволяет с помощью конечного числа шагов получить решение задачи, однозначно определяемое исходными данными из некоторого множества значений.\nСвойства алгоритма\n1. Дискретность (прерывность, раздельность). Алгоритм должен представлять процесс решения задачи как последовательное\nвыполнение конечного числа простых (или ранее определенных) законченных действий шагов.\n2. Понятность для исполнителя, т. е. исполнитель алгоритма\nдолжен знать, как его выполнять.\n3. Определенность (точность, детерминированность). Каждое\nправило алгоритма должно быть четким и однозначным, содержать\nдействия над известными данными. Каждое действие должно быть\nпонятно исполнителю (для каждого алгоритма предполагается конкретный исполнитель).\nЗамечание. Часто под свойством детерминированности алгоритма понимается одновременное выполнение свойств точности и\nпонятности.\n4. Результативность (или конечность). Алгоритм должен\nприводить к решению задачи, получение определенного результата\nза конечное число шагов.\n5. Правильность. Способность алгоритма обеспечить получение именно того результата, который требуется. Неправильность\nможет объясняться неполнотой наших представлений о свойствах\nобъекта или упущением в решении. Для доказательства правильности алгоритма задача часто делится на блоки, правильность доказывается для каждого блока, хотя такая проверка не является полной.\n6. Массовость. Алгоритм решения задачи разрабатывается в\nобщем виде, т. е. он должен быть применим для некоторого класса\nзадач, различающихся лишь исходными данными. При этом исходные данные могут выбираться из некоторой области, которая называется областью применимости алгоритма.\n7. Универсальность. Алгоритм должен быть составлен так,\nчтобы им мог воспользоваться любой исполнитель для решения\n10\nаналогичной задачи. Например, правила сложения и умножения чисел годятся для любых чисел, а не для каких-то конкретных.\n8. Эффективность. Выбор алгоритма, который будет выполнен за минимальное время, с минимальными затратами ресурсов.\nТаким образом, исполнитель действует формально, т. е. отвлекается от содержания поставленной задачи, а только строго выполняет некоторые правила, инструкции и вместе с тем получает нужный результат.\nКритерии качества алгоритма\n1. Связанность. Определяется количеством промежуточных\nрезультатов. Чем выше количество промежуточных результатов,\nтем ниже связанность.\n2. Объем алгоритма. Это количество операций или шагов,\nкоторые необходимо выполнить, а также сложность этих шагов.\n3. Логическая сложность. Определяется количеством ветвлений и циклов.\nПорядок выполнения алгоритма\n1. Действия в алгоритме выполняются в порядке их записи.\n2. Нельзя менять местами никакие два действия алгоритма.\n3. Нельзя не закончив одного действия переходить к следующему.\nСпособы описания алгоритмов\n1. Словесно-формульный. Описание алгоритма с помощью\nслов и формул на естественном языке.\nСловесный способ не имеет широкого распространения по следующим причинам:\n- такие описания строго не формализуемы;\n- страдают многословностью записей;\n- допускают неоднозначность толкования отдельных предписаний: «Он встретил ее на поле с цветами».\nПример. Составить алгоритм начисления зарплаты согласно\nследующему правилу: если стаж работы сотрудника менее 5 лет, то\nзарплата ‒ 130 руб., при стаже работы от 5 до 15 лет – 180 руб., при\nстаже свыше 15 лет зарплата повышается с каждым годом на 10 руб.\nСловесно-формульное описание алгоритма решения задачи:\n1. Ввести ST, перейти к п. 2.\n2. Если ST<5, то ZP:.=l30, перейти к п. 4, иначе – перейти к п. 3.\n11\n3. Если ST<15, то ZP:=180, перейти к п. 4, иначе ZP:=180+(ST‒\n15)10, перейти к п. 4.\n4. Вывести (отпечатать) значение ZP, перейти к п. 5.\n5. Вычисления прекратить.\n2. Табличный. Алгоритм представляется в форме таблицы и\nрасчётных формул (физика, химия и т. д.).\n3. Структурограмма.\n4. Синтаксическая диаграмма (формулы Бэкуса-Наура).\n5. Псевдокоды. Полуформализованные описания алгоритмов\nна условном алгоритмическом языке, включающие в себя как элементы языка программирования, так и фразы естественного языка,\nобщепринятые математические обозначения и др.\nПсевдокод занимает промежуточное место между естественным и формальным языками. С одной стороны, он близок к обычному естественному языку, поэтому алгоритмы могут на нем записываться и читаться как обычный текст. С другой стороны, в псевдокоде используются некоторые формальные конструкции и математическая символика, что приближает запись алгоритма к общепринятой математической записи.\nВ псевдокоде не приняты строгие синтаксические правила для\nзаписи команд, присущие формальным языкам, что облегчает запись алгоритма на стадии его проектирования и дает возможность\nиспользовать более широкий набор команд. Однако в псевдокоде,\nтак же как и в формальных языках, есть служебные слова, смысл\nкоторых определен раз и навсегда.\nЕдиного или формального определения псевдокода не существует, поэтому возможны различные псевдокоды, отличающиеся\nнабором служебных слов и основных (базовых) конструкций.\n12\nПримером псевдокода является школьный алгоритмический\nязык.\nАлгоритмический язык – это средство для записи алгоритмов в\nаналитическом виде, промежуточном между записью алгоритма на\nестественном (человеческом) языке и записью на языке ЭВМ (языке\nпрограммирования).\nЗапись алгоритма решения задачи примера 1 на алгоритмическом языке:\nалг зарплата(цел. ST, вещ ZP)\nарг ST\nрез ZP\nнач\nесли ST<5\nто ZP:=150\nиначе\nесли ST<=15\nто ZP:=180\nиначе ZP:=180+(ST-15)*10\nвсе\nвсе\nкон\n6. Программный. Описание алгоритма с помощью языков\nпрограммирования.\n7. Графический. Алгоритм изображается в виде последовательности связанных между собой функциональных блоков, каждый из которых соответствует выполнению одного или нескольких\nдействий. Такое графическое представление называется схемой алгоритма или блок-схемой.\nБлок-схема алгоритма представляет собой систему связанных\nгеометрических фигур.\nПравила построения блок-схем\n1. В блок-схеме каждому типу действий (вводу исходных данных, вычислению значений выражений, проверке условий, управлению повторением действий, окончанию обработки и т. п.) соответствует геометрическая фигура, представленная в виде блочного\nсимвола. Для наглядности операции разного вида изображаются в\nсхеме различными геометрическими фигурами.\n13\n2. Блочные символы соединяются линиями переходов, определяющими очередность выполнения действий. Порядок выполнения действий указывается стрелками, соединяющими блоки.\n3. В схеме блоки стараются размещать сверху вниз, в порядке\nих выполнения.\n4. Все повороты соединительных линий выполняются под углом 90 градусов.\nВ таблице приведены наиболее часто употребляемые символы.\nНазвание Обозначение и пример\nзаполнения\nВыполняемая функция\n(пояснение)\nНачало/конец\n(вход/выход)\nНачало или конец программы,\nвход или выход в подпрограмму\nБлоки\nввода/вывода\nВвод-вывод данных\nВывод данных на печатающее\nустройство\nБлок\nвычислений\nАрифметический блок определяет\nвычислительное действие или последовательность действий\nЛогический\nблок\nЛогический блок проверяет истинность или ложность условия и выбирает направления выполнения\nалгоритма в зависимости от условия. В блоке должны быть указаны\nвопрос, условие или сравнение,\nкоторые он определяет\nПредопределенный процесс\nВычисления по стандартной или\nпользовательской подпрограмме\nБлок\nмодификации\nВыполнение действий, изменяющих пункты алгоритма, начало\nцикла. Внутри блока записывается\nпараметр цикла, для которого указываются его начальное значение,\nграничное условие и шаг изменения значения параметра для каждого повторения\nМежстраничный\nсоединитель\nУказание связи между частями\nсхемы, расположенной на разных\nстраницах\n14\nОбщие правила построения схемы алгоритма задачи\n1. Выявить исходные данные, результаты, назначить им имена.\n2. Выбрать метод (порядок) решения задачи.\n3. Разбить метод решения задачи на этапы (с учетом возможностей ЭВМ).\n4. Изобразить каждый этап в виде соответствующего блока\nсхемы алгоритма и указать стрелками порядок их выполнения.\n5. В полученной схеме при любом варианте вычислений:\nа) предусмотреть выдачу результатов или сообщений об их отсутствии;\nб) обеспечить возможность после выполнения любой операции\nтак или иначе перейти к блоку Останов (к выходу схемы).\nЭти правила и есть «Основные принципы алгоритмизации».\nБудем считать, что знание и применение настоящих «принципов»\nобязательно при составлении алгоритма любой задачи.\nТипы алгоритмов\n- структурированные;\n- неструктурированные (т. е. с нарушением структуры – с операторами безусловного перехода);\n- вспомогательные (используемые в составе других алгоритмов).\nВиды алгоритмов\n- линейный алгоритм;\n- алгоритм ветвления;\n- циклический алгоритм;\n- алгоритм с подпрограммами;\n- смешанные (т. е. содержащие и циклы, и ветвление, и функции);\n- рекурсивный алгоритм обращается к самому себе, пока не выполнится определенное условие.\nБазовые алгоритмические конструкции\nСтрукту́рное программи́рование – методология разработки\nпрограммного обеспечения, в основе которой лежит представление\nпрограммы в виде иерархической структуры блоков. Предложена в\n70-х годах XX века Э. Дейкстрой, разработана и дополнена Н. Виртом. Основывается на теореме о структуре.\nСогласно теореме о структуре (теорема Бёма – Якопини, 1966 г.)\nлогическая структура любого алгоритма может быть представлена\nкомбинацией трех базовых структур: следование, ветвление, цикл.\n15\nХарактерной особенностью базовых структур является наличие в них одного входа и одного выхода.\n1. Базовая структура СЛЕДОВАНИЕ (линейный алгоритм). Образуется из последовательности действий, следующих\nодно за другим:\n2. Базовая структура ВЕТВЛЕНИЕ (алгоритм ветвления)\nобеспечивает в зависимости от результата проверки условия выбор\nодного из альтернативных путей работы алгоритма. Условие – вопрос, имеющий два варианта ответа: да или нет. Каждый из путей\nведет к общему выходу, так что работа алгоритма будет продолжаться независимо от того, какой путь будет выбран. Запись ветвления выполняется в двух формах: полной и неполной.\nСтруктура ветвление существует в четырех основных вариантах:\nНеполная форма записи Полная форма записи\n1. Если-то\n2. Если-то-иначе\n16\n3. Выбор\n4. Выбор-иначе\n3. Базовая структура ЦИКЛ обеспечивает многократное\nвыполнение некоторой совокупности действий, которая называется телом цикла, над новыми данными.\nЦикл типа «пока» (Цикл с предусловием)\nВыполнение цикла «пока» начинается с проверки\nусловия, поэтому такую разновидность циклов\nназывают циклами с предусловием. Переход к выполнению действия осуществляется только в том\nслучае, если условие выполняется, иначе происходит выход из цикла. Тело цикла выполняется до тех\nпор, пока выполняется условие. Условие цикла\nнеобходимо подобрать так, чтобы действия, выполняемые в цикле, привели к нарушению его истинности, иначе произойдет зацикливание. Зацикливание\n‒ бесконечное повторение выполняемых действий.\nЦИКЛЫ\nс неизвестным числом повторов\nс предусловием\n(цикл «пока»)\nс известным числом\nповторов\n(цикл «для»)\nс постусловием\n(цикл «до»)\n17\nЦикл типа «до» (Цикл с постусловием)\nИсполнение цикла начинается с выполнения действия.\nТаким образом, тело цикла будет реализовано хотя бы\nодин раз. После этого происходит проверка условия. Поэтому цикл «до» называют циклом с постусловием. Если\nусловие выполняется, то происходит возврат к выполнению действий, иначе осуществляется выход из цикла. Для\nпредотвращения зацикливания необходимо предусмотреть действия, приводящие к ложности условия.\nЦикл типа «для»\nЦикл с параметром, или цикл со счетчиком, или\nарифметический цикл ‒ это цикл с заранее известным числом повторов. Предписывает выполнять\nтело цикла для всех значений некоторой переменной (параметра цикла) в заданном диапазоне.\nх0 – начальное значение параметра;\nh – шаг;\nхn – последнее значение параметра.\nДля создания циклов с параметром необходимо использовать следующие правила:\n1. Параметр цикла, его начальное и конечное значения и шаг\nдолжны быть одного типа.\n2. Запрещено изменять в теле цикла начальное, текущее и конечное значения для параметра.\n3. Запрещено входить в цикл, минуя блок модификации.\n4. После выхода из цикла значение переменной параметра неопределенно и не может использоваться в дальнейших вычислениях.\n5. Из цикла можно выйти, не закончив его, тогда переменная\nпараметр сохраняет свое последнее значение.\n1.3. Теоретические основы программирования\nПрограммирование – это раздел информатики, изучающий\nметоды и приемы составления программ для компьютеров. Кроме\nтого, программирование – это подготовка задачи к решению ее на\nкомпьютере.\n18\nПрограмма – последовательность действий, которые должен\nвыполнить компьютер в строго указанной очерёдности для достижения конкретного результата.\nЯзыки программирования – это совокупность средств и правил представления алгоритма в виде, приемлемом для компьютера.\nСистемы программирования – это набор средств ввода, редактирования, трансляции и выполнения программ на ЭВМ.\nТранслятор – это устройство или комплекс программ, обеспечивающий перевод программы, написанной на символическом\nязыке, в совокупность машинных команд, либо передающие/преобразующие данные или другую программу.\nНапример, транслятор воспринимает операторы одного языка\nи вырабатывает соответствующие операторы другого языка.\nКомпилятор – это транслятор, обеспечивающий перевод программы, написанной на алгоритмическом языке, в совокупность машинных команд без ее выполнения в компьютере.\nКомпилятор оценивает исходный текст в соответствии с синтаксической конструкцией языка и переводит на машинный язык.\nНапример, компилятор берет программу, написанную на языке\nC, и преобразует ее в программу на языке ассемблера.\nИнтерпретатор – это транслятор, обеспечивающий перевод\nкаждой конструкции алгоритмического языка в машинные команды\nи одновременное выполнение этой конструкции в компьютере.\nПри исполнении программных операторов интерпретатор должен сначала сканировать каждый оператор с целью прочтения его\nсодержимого, а затем выполнить запрошенную операцию.\n1.4. Установка Python и сред разработки\nДля работы необходимо установить интерпретатор языка Питон и для удобства написания программ ‒ среду разработки.\nУстановка интерпретатора\nДистрибутивы для установки:\n\uF0A7 Windows, 32-бита: https://www.python.org/ftp/python/3.10.5/\npython-3.10.5.exe\n\uF0A7 Windows, 64-бита: https://www.python.org/ftp/python/3.10.5/\npython-3.10.5-amd64.exe\n\uF0A7 Дистрибутивы для Mac OS X есть на странице\nhttps://www.python.org/downloads/release/python-3105/\n19\n\uF0A7 Для операционных систем GNU/Linux язык Питон скорее\nвсего есть в дистрибутиве, для чего необходимо поставить пакет\npython3. Возможно, он уже установлен в вашей системе: проверить\nэто можно командой python3.\n\uF0A7 Для Android есть пакет QPython3.\nУстановка интегрированной среды разработки\nДля удобства разработки кода программисты используют\nсреды разработки (IDE).\nДля обучения программированию на языке Питон рекомендуется среда разработки Wing IDE 101.\nДля больших проектов рекомендуется PyCharm Community\nEdition.\nWING IDE 101\nДистрибутив для Windows:\nhttp://wingware.com/pub/wingide-101/5.0.9/wingide-101-5.0.9-1.exe\nДистрибутивы для других операционных систем:\nhttp://wingware.com/downloads/wingide-101\nВидео установки Python и Wing IDE 101 на Windows 7 (на английском):\nhttp://www.youtube.com/watch?v=OrpavIGbkSw\nОбратите внимание: если вы устанавливаете среду после установки Python, то она должна сама обнаружить установленный\nPython. Если этого не произошло, пропишите в меню Edit-Configure\npython в верхнем поле ввода путь к исполняемому файлу Python\n(под windows это обычно что-то типа c:\\python34\\python.exe).\nPYCHARM COMMUNITY EDITION\nВерсия для Windows:\nhttps://download.jetbrains.com/python/pycharm-community2022.1.4.exe\nОстальные версии можно скачать здесь:\nhttp://www.jetbrains.com/pycharm/download/\n20\n1.5. Правила записи в Python арифметических выражений\nАрифметические выражения\nВыражение состоит из операторов и операндов. Операндами могут быть выражения или одни из его частных случаев –\nчисла (константы) или переменные, операторы обозначают выполняемые над ними действия (+ сложение, - вычитание, * умножение,\n/ деление (результат – частное, т. е. вещественное число, даже если\nA нацело делится на B), //– целая часть от деления (неполное частное), % остаток от деления, …).\nВсе основные операции языка С++ можно разбить на\nследующие группы:\n- арифметические операции;\n- логические операции;\n- операции отношения;\n- операции с битами информации;\n- операции со строками;\n- операции присваивания;\n- условная операция (условное выражение или тернарная\nоперация).\nПримеры выражений Python\n(a + 0.12)/6\nx and y or not z\n(t * sin(x)-1.05e4)/((2 * k + 2) * (2 * k + 3))\nВ выражение могут входить операнды различных типов, но\nэтого, строго говоря, не следует допускать. Если операнды имеют\nодинаковый тип, то результат операции будет иметь тот же тип.\nЕсли операнды различного типа, то перед вычислениями\nвыполняются преобразования типов по определенным правилам,\nобеспечивающим преобразование более коротких типов в более\nдлинные для сохранения значимости и точности.\nПорядок вычисления выражений определяется рангом (приоритетом) входящих в него операций (табл. 1.1). Принятый в С++ ранг\nопераций наиболее близок к математическому, также как и принятый\nпорядок их вычисления. Так, умножение и деление (мультипликативные операции) старше сложения и вычитания (аддитивные\nоперации). Унарные операции + и – старше бинарных, т.е., знак\nоперанда вычисляется в первую очередь. Операции типа присваивания\n21\nмладше прочих, что позволяет выполнить их только после того, как\nзначение выражения вычислено полностью. Операции отношения\nмладше арифметических операций, что позволяет использовать\nестественную запись логических выражений, например, x>0 && y>0.\nЗдесь в первую очередь вычисляются значения отношений, которые\nзатем являются операндами конъюнкции.\nТаблица 1.1\nПорядок вычисления выражений\nГруппа Тип действий Операции или элементы\n1 Вычисления в круглых\nскобках\n( )\n2 Вычисления значений\nфункции\nФункции\n3 Унарные операции +, -, ~ (побитовое отрицание), …\n4 Операции типа\nумножения\n*, /, %\n5 Операции типа\nсложения\n+, –\n6 Операции отношения <, <=, >, >=, ==, !=\nАрифметические выражения строятся из операндов, арифметических операций и круглых скобок.\nКруглые скобки используются для заключения в них части\nвыражения, значения которой необходимо выполнить в первую\nочередь. В выражении может быть любое количество круглых скобок,\nпричем количество открывающих круглых скобок должно быть равно\nколичеству закрывающих. Части выражений, заключенные в круглые\nскобки, должны быть либо не пересекающимися, либо вложенными\nдруг в друга.\nАрифметические выражения записываются по следующим\nправилам:\n– Запись ведётся в строчку.\n– Нельзя опускать знак умножения между сомножителями.\n– Для обозначения переменных используются буквы латинского алфавита.\n– Операции выполняются в соответствии с приоритетами:\nсначала вычисление функций, затем умножение и деление, потом\nсложение и вычитание.\n22\n– Если в одном выражении записано несколько операций одинакового приоритета, унарные операции, условная операция и операции присваивания выполняются справа налево, остальные – слева\nнаправо. Например, a = b = c означает a = (b = c), а a + b + с означает\n(a + b) + c.\n– Для изменения порядка действий используются круглые\nскобки.\n– При использовании стандартных функций аргумент обязательно заключается в круглые скобки.",
      "imageUrlList": [
        {
          "id": 1,
          "contentChapter_Id": 1,
          "url": "check_box"
        },
        {
          "id": 2,
          "contentChapter_Id": 1,
          "url": "logo"
        }
      ],
      "linkUrlList": [
        {
          "id": 1,
          "contentChapter_id": 1,
          "url": "LinkUrl1.com"
        },
        {
          "id": 2,
          "contentChapter_id": 1,
          "url": "LinkUrl2.com"
        }
      ]
    },
    "test": {
      "id": 1,
      "name": "Тест1",
      "chapter_id": 1,
      "isDone": false,
      "questionList": [
        {
          "id": 1,
          "questionText": "\tВыберите существующие типы данных",
          "test_id": 1,
          "answerList": [
            {
              "id": 1,
              "answerText": "int",
              "question_id": 1,
              "isRight": true
            },
            {
              "id": 2,
              "answerText": "double",
              "question_id": 1,
              "isRight": true
            },
            {
              "id": 3,
              "answerText": "text",
              "question_id": 1,
              "isRight": false
            },
            {
              "id": 4,
              "answerText": "xml",
              "question_id": 1,
              "isRight": false
            },
            {
              "id": 5,
              "answerText": "long",
              "question_id": 1,
              "isRight": false
            }
          ]
        },
        {
          "id": 2,
          "questionText": "\tВыберите наименьший целочисленный тип",
          "test_id": 1,
          "answerList": [
            {
              "id": 4,
              "answerText": "byte",
              "question_id": 2,
              "isRight": true
            },
            {
              "id": 5,
              "answerText": "long",
              "question_id": 2,
              "isRight": false
            }
          ]
        }
      ]
    }
  },
  {
    "id": 2,
    "name": "Глава 2",
    "accepted": false,
    "content": {
      "id": 2,
      "chapter_id": 2,
      "contentText": "\tАрифметические операции бывают: +, -, *, /, %",
      "imageUrlList": [
        {
          "id": 3,
          "contentChapter_Id": 2,
          "url": "ImageUrl3.com"
        },
        {
          "id": 4,
          "contentChapter_Id": 2,
          "url": "ImageUrl4.com"
        }
      ],
      "linkUrlList": [
        {
          "id": 3,
          "contentChapter_id": 2,
          "url": "LinkUrl3.com"
        },
        {
          "id": 4,
          "contentChapter_id": 2,
          "url": "LinkUrl4.com"
        }
      ]
    },
    "test": {
      "id": 2,
      "name": "Тест2",
      "chapter_id": 2,
      "isDone": false,
      "questionList": [
        {
          "id": 3,
          "questionText": "\tВыберите существующие арифметические операции",
          "test_id": 2,
          "answerList": [
            {
              "id": 6,
              "answerText": "+",
              "question_id": 3,
              "isRight": true
            },
            {
              "id": 7,
              "answerText": "-",
              "question_id": 3,
              "isRight": true
            },
            {
              "id": 8,
              "answerText": "{}",
              "question_id": 3,
              "isRight": false
            }
          ]
        },
        {
          "id": 4,
          "questionText": "\tВыберите несуществующие арифметические операции",
          "test_id": 2,
          "answerList": [
            {
              "id": 9,
              "answerText": "|",
              "question_id": 4,
              "isRight": true
            },
            {
              "id": 10,
              "answerText": "-",
              "question_id": 4,
              "isRight": false
            }
          ]
        }
      ]
    }
  }
]